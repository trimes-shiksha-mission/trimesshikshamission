// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
  SUPERUSER
}

enum Gender {
  male
  female
  other
}

enum MaritalStatus {
  unmarried
  divorced
  widowed
  married
}

enum BloodGroup {
  A_Positive
  A_Negative
  B_Positive
  B_Negative
  AB_Positive
  AB_Negative
  O_Positive
  O_Negative
}

enum Complexion {
  Fair
  Wheatish
  Dark
}

enum IncomeBracket {
  BELOW_3_LAKHS
  Three_TO_Five_LAKHS
  Five_TO_Ten_LAKHS
  Ten_TO_Fifteen_LAKHS
  Fifteen_TO_TwentyFive_LAKHS
  ABOVE_25_LAKHS
}

model User {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  email              String?       @unique
  gender             Gender
  maritalStatus      MaritalStatus
  contact            String?       @unique
  isVerified         Boolean       @default(false)
  birthday           DateTime
  occupation         String
  qualification      String
  gautra             String
  nativeTown         String
  password           String?
  fatherName         String?
  bloodGroup         String?
  address            String
  familyAnnualIncome String?
  showInMatrimony    Boolean       @default(false)
  isPrivateProperty  Boolean       @default(false)
  areaId             String?       @db.Uuid
  area               Area?         @relation("areaRelation", fields: [areaId], references: [id])
  relationWithHead   String?
  headId             String?       @db.Uuid
  head               User?         @relation("head", fields: [headId], references: [id])
  members            User[]        @relation("head")
  createdById        String?       @db.Uuid
  createdBy          Admin?        @relation("createdByUsers", fields: [createdById], references: [id])
  updatedById        String?       @db.Uuid
  updatedBy          Admin?        @relation("updatedByUsers", fields: [updatedById], references: [id])
  createdAt          DateTime      @default(now()) @db.Timestamptz()
  updatedAt          DateTime      @default(now()) @updatedAt @db.Timestamptz()

  // forgotPasswordToken join
  forgotPasswordToken forgotPasswordToken? @relation("userForgotPasswordToken")
}

model Admin {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  email          String
  password       String
  role           Role
  areaId         String?  @db.Uuid
  area           Area?    @relation(fields: [areaId], references: [id])
  createdAt      DateTime @default(now()) @db.Timestamptz()
  updatedAt      DateTime @default(now()) @updatedAt @db.Timestamptz()
  createdById    String?  @db.Uuid
  createdBy      Admin?   @relation(name: "createdBy", fields: [createdById], references: [id])
  createdAdmins  Admin[]  @relation(name: "createdBy")
  updatedById    String?  @db.Uuid
  updatedBy      Admin?   @relation(name: "updatedBy", fields: [updatedById], references: [id])
  updatedAdmins  Admin[]  @relation(name: "updatedBy")
  createdSchools School[] @relation(name: "createdBySchools")
  updatedSchools School[] @relation(name: "updatedBySchools")
  createdUsers   User[]   @relation(name: "createdByUsers")
  updatedUsers   User[]   @relation(name: "updatedByUsers")
  Blog           Blog[]   @relation(name: "createdByBlogs")

  @@unique([email, role])
}

model Area {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()
  Admin     Admin[]
  User      User[]   @relation("areaRelation")
}

model Editorial {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  body      String
  createdAt DateTime @default(now()) @db.Timestamptz()
}

model School {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  address     String
  createdById String   @db.Uuid
  createdBy   Admin    @relation("createdBySchools", fields: [createdById], references: [id])
  updatedById String   @db.Uuid
  updatedBy   Admin    @relation("updatedBySchools", fields: [updatedById], references: [id])
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz()

  @@unique([name, address])
}

model Blog {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  body        String
  type        String
  createdAt   DateTime @default(now()) @db.Timestamptz()
  createdById String   @db.Uuid
  createdBy   Admin    @relation("createdByBlogs", fields: [createdById], references: [id])
}

model forgotPasswordToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  user User @relation("userForgotPasswordToken", fields: [userId], references: [id])

  @@unique([userId])
}

model Resource {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  url       String
  path      String
  type      String?
  createdAt DateTime?

  @@map("Resources")
}

model MarriageProfile {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  nativePlace       String
  currentCity       String
  height            String
  bloodGroup        BloodGroup
  complexion        Complexion?
  dob               DateTime
  birthPlace        String
  qualification     String
  currentJobProfile String?
  annualIncome      IncomeBracket
  fatherName        String
  fatherOccupation  String
  motherName        String
  motherOccupation  String
  siblings          Siblings?     @relation(fields: [siblingsId], references: [id])
  siblingsId        String?       @unique @db.Uuid
  parentsContact    BigInt
  address           String
  manglic           Boolean
  maritalStatus     MaritalStatus
  gender            Gender
  createdAt         DateTime      @default(now()) @db.Timestamptz()
  updatedAt         DateTime      @default(now()) @updatedAt @db.Timestamptz()
}

model Siblings {
  id       String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  brothers Int
  sisters  Int
  user     MarriageProfile?
}
